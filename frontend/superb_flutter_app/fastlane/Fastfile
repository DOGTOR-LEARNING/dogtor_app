default_platform(:ios)

platform :ios do
  before_all do
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
    
    # 🔇 隱藏 Warning 和減少 Log 輸出
    ENV["FASTLANE_HIDE_GITHUB_ISSUES"] = "1"
    ENV["FASTLANE_HIDE_CHANGELOG"] = "1"
    ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
    ENV["FASTLANE_DISABLE_ANIMATION"] = "1"
    
    # 減少 Xcode 的 Warning 輸出
    # ENV["XCODE_XCCONFIG_FILE"] = ""
    
    # CocoaPods 靜音
    ENV["COCOAPODS_DISABLE_STATS"] = "true"
  end

  desc "Build iOS app with manual code signing for CI"
  lane :build do
    setup_ci if ENV['CI']

    # 設定 App Store Connect API（從環境變數讀取）
    if ENV['CI']
      api_key = app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY']
      )
    end
    
    # 1) 設置 Flutter 環境
    sh("flutter", "clean", log: false)
    sh("flutter", "pub", "get", log: false)

    # 2) CocoaPods（在 ios 目錄底下）
    cocoapods(
      podfile: "ios/Podfile",
      try_repo_update_on_error: true,
      clean_install: true,   # 等同 pod install --clean-install（避免殘留）
      repo_update: false,    # 需要時才設 true；與 try_repo_update_on_error 互斥
      silent: true           # 🔇 靜音模式
    )

    begin
      update_code_signing_settings(
        path: "ios/Pods/Pods.xcodeproj",
        use_automatic_signing: true
      )
      UI.message("✅ 已設定 Pods 專案為自動簽署")
    rescue => e
      UI.message("⚠️ 無法設定 Pods 自動簽署: #{e.message}")
    end
    
    # 下載匹配的證書和描述檔案
    match(
      type: "appstore",
      readonly: true,
      api_key: api_key, # 從環境變數讀取
      clone_branch_directly: true
    )

    # 設定手動簽章
    TEAM   = "623TA8PLPU"
    BUNDLE = "com.dogtor.superbFlutterApp"
    PROF   = "match AppStore #{BUNDLE}"

    # 強制設定為手動簽章
    update_code_signing_settings(
      path: "ios/Runner.xcodeproj", 
      use_automatic_signing: false, 
      code_sign_identity: "Apple Distribution",
      team_id: TEAM, 
      targets: ["Runner"]
    )


    # 從 match 下載的 profiles 中抓到實際檔案路徑
    profile_path = get_provisioning_profile(
      app_identifier: BUNDLE,
      development: false,
      #readonly: true,
      api_key: api_key # 從環境變數讀取
    )
    
    # 綁定 Release 組態的 Provisioning Profile
    update_project_provisioning(
      xcodeproj: "ios/Runner.xcodeproj",
      target_filter: "Runner",
      build_configuration: "Release",
      # profile: profile_path
      # 建議：直接省略 profile，會用 SIGH_PROFILE_PATH 預設
      # profile: lane_context[SharedValues::SIGH_PROFILE_PATH]
    )

    # 構建應用
    build_app(
      workspace: File.expand_path("../ios/Runner.xcworkspace", __dir__),
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      codesigning_identity: "Apple Distribution",
      clean: true,
      silent: true,          # 🔇 減少構建輸出
      suppress_xcode_output: false,  # 🔇 隱藏 Xcode 詳細輸出
      skip_profile_detection: true,                 # ← 取消 gym 自動產生 provisioningProfiles
      export_options: { method: "app-store" },      # ← 最小化，不放 provisioningProfiles/signingStyle
      xcargs: [
        "DEVELOPMENT_TEAM=#{TEAM}",
        # "CODE_SIGN_STYLE=Manual",
        "PRODUCT_BUNDLE_IDENTIFIER=#{BUNDLE}",
        # "PROVISIONING_PROFILE_SPECIFIER='match AppStore #{BUNDLE}'", # Avoid affecting other third-party plugins 
        # "CODE_SIGN_IDENTITY=iPhone Distribution"
      ].join(" "),
      output_directory: "./build",
      output_name: "Runner.ipa",
      include_symbols: true
    )
    
    # 🔍 Debug: 檢查 ExportOptions.plist
    export_plist_path = Dir.glob("/tmp/**/gym_config*.plist").first || Dir.glob("/var/folders/**/gym_config*.plist").first
    if export_plist_path && File.exist?(export_plist_path)
      UI.message("📋 ExportOptions.plist 位置: #{export_plist_path}")
      export_options_content = File.read(export_plist_path)
      UI.message("📄 ExportOptions.plist 內容:")
      UI.message(export_options_content)
    else
      UI.message("⚠️  未找到 ExportOptions.plist 檔案")
    end
    
    # 🔍 Debug: 檢查證書和 Provisioning Profile
    UI.message("🔐 已安裝的證書:")
    sh("security find-identity -v -p codesigning", log: false)
    
    UI.message("📱 可用的 Provisioning Profiles:")
    sh("find ~/Library/MobileDevice/Provisioning\\ Profiles -name '*.mobileprovision' -exec echo {} \\; -exec security cms -D -i {} \\; | grep -A1 -B1 '#{BUNDLE}'", log: false) rescue UI.message("無法列出 Provisioning Profiles")
    
    # 🔍 Debug: 檢查構建結果
    if File.exist?("./build/Runner.ipa")
      ipa_size = File.size("./build/Runner.ipa") / (1024 * 1024.0)
      UI.success("✅ IPA 檔案已建立: #{ipa_size.round(2)} MB")
    else
      UI.error("❌ IPA 檔案建立失敗")
    end
    
    UI.success("✅ iOS build completed successfully!")
  end

  desc "Deploy to TestFlight"
  lane :beta do
    setup_ci if ENV['CI']
    
    # 設定 App Store Connect API（從環境變數讀取）
    if ENV['CI']
      api_key = app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY']
      )
    end
    
    # 設置 Flutter 環境
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    
    # CocoaPods
    cocoapods(
      podfile: "ios/Podfile",
      try_repo_update_on_error: true,
      clean_install: true,
      repo_update: false,
      silent: true
    )

    # 🔧 在 CocoaPods 之後，match 之前加入
    begin
      update_code_signing_settings(
        path: "ios/Pods/Pods.xcodeproj",
        use_automatic_signing: true
      )
      UI.message("✅ 已設定 Pods 專案為自動簽署")
    rescue => e
      UI.message("⚠️ 無法設定 Pods 自動簽署: #{e.message}")
    end

    # 下載匹配的證書和描述檔案  
    match(
      type: "appstore",
      readonly: true,
      api_key: api_key,
      clone_branch_directly: true
    )
    
    # 設定手動簽章
    TEAM   = "623TA8PLPU"
    BUNDLE = "com.dogtor.superbFlutterApp"
    PROF   = "match AppStore #{BUNDLE}"

    # 強制設定為手動簽章
    update_code_signing_settings(
      path: "ios/Runner.xcodeproj", 
      use_automatic_signing: false, 
      team_id: TEAM, 
      targets: ["Runner"]
    )
    
    # 綁定 Release 組態的 Provisioning Profile
    update_project_provisioning(
      xcodeproj: "ios/Runner.xcodeproj",
      target_filter: "Runner",
      build_configuration: "Release",
      profile: PROF
    )
    
    # 自動增加 build number
    increment_build_number(
      xcodeproj: "ios/Runner.xcodeproj"
    )
    
    build_app(
      workspace: "ios/Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      xcargs: [
        "DEVELOPMENT_TEAM=#{TEAM}",
        #"CODE_SIGN_STYLE=Manual",
        "PRODUCT_BUNDLE_IDENTIFIER=#{BUNDLE}",
        "IPHONEOS_DEPLOYMENT_TARGET=13.0",  # 🔧 更新為 iOS 13.0
        "PROVISIONING_PROFILE_SPECIFIER='#{PROF}'"
      ].join(" "),
      output_directory: "./build",
      output_name: "Runner.ipa",
      include_symbols: true
    )
    
    upload_to_testflight(
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      changelog: "New beta build from CI/CD"
    )
    
    UI.success("🚀 App successfully uploaded to TestFlight!")
  end

  desc "Deploy to App Store"
  lane :deploy do
    setup_ci if ENV['CI']
    
    # 設定 App Store Connect API（從環境變數讀取）
    if ENV['CI']
      api_key = app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY']
      )
    end
    
    # 設置 Flutter 環境
    sh("flutter", "clean")
    sh("flutter", "pub", "get")
    
    # CocoaPods
    cocoapods(
      podfile: "ios/Podfile",
      try_repo_update_on_error: true,
      clean_install: true,
      repo_update: false
    )
    
    match(
      type: "appstore",
      readonly: true,
      api_key: api_key,
      clone_branch_directly: true
    )
    
    # 設定手動簽章
    TEAM   = "623TA8PLPU"
    BUNDLE = "com.dogtor.superbFlutterApp"
    PROF   = "match AppStore #{BUNDLE}"

    # 強制設定為手動簽章
    update_code_signing_settings(
      path: "ios/Runner.xcodeproj", 
      use_automatic_signing: false, 
      team_id: TEAM, 
      targets: ["Runner"]
    )
    
    # 綁定 Release 組態的 Provisioning Profile
    update_project_provisioning(
      xcodeproj: "ios/Runner.xcodeproj",
      target_filter: "Runner",
      build_configuration: "Release",
      profile: PROF
    )
    
    build_app(
      workspace: "ios/Runner.xcworkspace",
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      xcargs: [
        "DEVELOPMENT_TEAM=#{TEAM}",
        "CODE_SIGN_STYLE=Manual",
        "PRODUCT_BUNDLE_IDENTIFIER=#{BUNDLE}",
        "IPHONEOS_DEPLOYMENT_TARGET=13.0",  # 🔧 更新為 iOS 13.0
        "PROVISIONING_PROFILE_SPECIFIER='#{PROF}'"
      ].join(" "),
      output_directory: "./build",
      output_name: "Runner.ipa",
      include_symbols: true
    )
    
    upload_to_app_store(
      api_key: api_key,
      submit_for_review: false,
      automatic_release: false,
      force: true,
      skip_metadata: false,
      skip_screenshots: true,
      precheck_include_in_app_purchases: false
    )
    
    UI.success("🏪 App successfully uploaded to App Store Connect!")
  end
end