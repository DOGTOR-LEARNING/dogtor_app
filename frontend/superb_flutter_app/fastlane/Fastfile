default_platform(:ios)

platform :ios do
  before_all do
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
    
    # 🔇 隱藏 Warning 和減少 Log 輸出
    ENV["FASTLANE_HIDE_GITHUB_ISSUES"] = "1"
    ENV["FASTLANE_HIDE_CHANGELOG"] = "1"
    ENV["FASTLANE_SKIP_UPDATE_CHECK"] = "1"
    ENV["FASTLANE_DISABLE_ANIMATION"] = "1"
    
    # 減少 Xcode 的 Warning 輸出
    # ENV["XCODE_XCCONFIG_FILE"] = ""
    
    # CocoaPods 靜音
    ENV["COCOAPODS_DISABLE_STATS"] = "true"
  end

  desc "Build iOS app with manual code signing for CI"
  lane :build do
    setup_ci if ENV['CI']

    # 設定 App Store Connect API（從環境變數讀取）
    if ENV['CI']
      api_key = app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY']
      )
    end
    
    # 1) 設置 Flutter 環境
    sh("flutter", "clean", log: false)
    sh("flutter", "pub", "get", log: false)

    # 2) CocoaPods（在 ios 目錄底下）
    cocoapods(
      podfile: "ios/Podfile",
      try_repo_update_on_error: true,
      clean_install: true,   # 等同 pod install --clean-install（避免殘留）
      repo_update: false,    # 需要時才設 true；與 try_repo_update_on_error 互斥
      silent: true           # 🔇 靜音模式
    )
    
    # 🔧 修正 CocoaPods target 的 iOS deployment target
    podfile_path = File.expand_path("../ios/Podfile", __dir__)
    if File.exist?(podfile_path)
      sh("sed -i '' 's/platform :ios, .*/platform :ios, \"12.0\"/' '#{podfile_path}'")
      UI.message("📱 Updated Podfile platform to iOS 12.0")
    else
      UI.error("❌ Podfile not found at #{podfile_path}")
    end
    
    # 修正 Pods 目錄中的 deployment target
    pods_dir = File.expand_path("../ios/Pods", __dir__)
    if Dir.exist?(pods_dir)
      sh("find '#{pods_dir}' -name '*.xcconfig' -exec sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]*/IPHONEOS_DEPLOYMENT_TARGET = 12.0/g' {} \\;") rescue UI.message("Could not update deployment targets in xcconfig files")
      UI.message("🔧 Updated Pods deployment targets to iOS 12.0")
    end
    
    # 同時下載 Development 和 App Store 證書
    match(
      type: "development",  # 👈 Archive 階段用
      readonly: true,
      api_key: api_key,
      clone_branch_directly: true
    )

    match(
      type: "appstore",     # 👈 Export 階段用
      readonly: true,
      api_key: api_key,
      clone_branch_directly: true
    )

    # 設定手動簽章
    TEAM   = "623TA8PLPU"
    BUNDLE = "com.dogtor.superbFlutterApp"
    PROF   = "match AppStore #{BUNDLE}"

    # 設定為自動簽章（使用 match 下載的證書）
    update_code_signing_settings(
      path: "ios/Runner.xcodeproj", 
      use_automatic_signing: true,  # 🔄 改為自動簽署
      team_id: TEAM, 
      targets: ["Runner"]
    )

    # 構建應用
    build_app(
      workspace: File.expand_path("../ios/Runner.xcworkspace", __dir__),
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      silent: false,          # 🔇 減少構建輸出
      suppress_xcode_output: false,  # 🔇 隱藏 Xcode 詳細輸出
      #codesigning_identity: "Apple Development",
      xcargs: [
        "DEVELOPMENT_TEAM=#{TEAM}",
        "PRODUCT_BUNDLE_IDENTIFIER=#{BUNDLE}",
        "IPHONEOS_DEPLOYMENT_TARGET=12.0",  # 🔧 修正 iOS 版本要求
        #"CODE_SIGN_IDENTITY=Apple Distribution",  # 👈 強制指定 Distribution 證書
        "-allowProvisioningUpdates"  # 🔧 允許 Xcode 自動更新 Provisioning Profiles
      ].join(" "),
      output_directory: "./build",
      output_name: "Runner.ipa",
      include_symbols: true
    )
    
    # 🔍 Debug: 檢查 ExportOptions.plist
    export_plist_path = Dir.glob("/tmp/**/gym_config*.plist").first || Dir.glob("/var/folders/**/gym_config*.plist").first
    if export_plist_path && File.exist?(export_plist_path)
      UI.message("📋 ExportOptions.plist 位置: #{export_plist_path}")
      export_options_content = File.read(export_plist_path)
      UI.message("📄 ExportOptions.plist 內容:")
      UI.message(export_options_content)
    else
      UI.message("⚠️  未找到 ExportOptions.plist 檔案")
    end
    
    # 🔍 Debug: 檢查證書和 Provisioning Profile
    UI.message("🔐 已安裝的證書:")
    sh("security find-identity -v -p codesigning", log: false)
    
    UI.message("📱 可用的 Provisioning Profiles:")
    sh("find ~/Library/MobileDevice/Provisioning\\ Profiles -name '*.mobileprovision' -exec echo {} \\; -exec security cms -D -i {} \\; | grep -A1 -B1 '#{BUNDLE}'", log: false) rescue UI.message("無法列出 Provisioning Profiles")
    
    # 🔍 Debug: 檢查構建結果
    if File.exist?("./build/Runner.ipa")
      ipa_size = File.size("./build/Runner.ipa") / (1024 * 1024.0)
      UI.success("✅ IPA 檔案已建立: #{ipa_size.round(2)} MB")
    else
      UI.error("❌ IPA 檔案建立失敗")
    end
    
    UI.success("✅ iOS build completed successfully!")
  end

  desc "Deploy to TestFlight"
  lane :beta do
    setup_ci if ENV['CI']
    
    # 設定 App Store Connect API（從環境變數讀取）
    if ENV['CI']
      api_key = app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY']
      )
    end
    
    # 🔄 重用 build lane 的設定並增加 build number
    build  # 重用 build lane
    
    # 自動增加 build number
    increment_build_number(
      xcodeproj: "ios/Runner.xcodeproj"
    )
    
    # 重新 build（因為 build number 改變了）
    build_app(
      workspace: File.expand_path("../ios/Runner.xcworkspace", __dir__),
      scheme: "Runner",
      configuration: "Release",
      export_method: "app-store",
      clean: false,  # 不需要 clean，build lane 已經做了
      silent: true,
      suppress_xcode_output: true,
      xcargs: [
        "DEVELOPMENT_TEAM=623TA8PLPU",
        "PRODUCT_BUNDLE_IDENTIFIER=com.dogtor.superbFlutterApp",
        "IPHONEOS_DEPLOYMENT_TARGET=12.0",
        "CODE_SIGN_IDENTITY=Apple Distribution",
        "-allowProvisioningUpdates"  # 🔧 允許 Xcode 自動更新 Provisioning Profiles
      ].join(" "),
      output_directory: "./build",
      output_name: "Runner.ipa",
      include_symbols: true
    )
    
    upload_to_testflight(
      api_key: api_key,
      skip_waiting_for_build_processing: true,
      changelog: "New beta build from CI/CD"
    )
    
    UI.success("🚀 App successfully uploaded to TestFlight!")
  end

  desc "Deploy to App Store"
  lane :deploy do
    setup_ci if ENV['CI']
    
    # 設定 App Store Connect API（從環境變數讀取）
    if ENV['CI']
      api_key = app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY']
      )
    end
    
    # 🔄 重用 build lane 的設定
    build  # 重用 build lane
    
    upload_to_app_store(
      api_key: api_key,
      submit_for_review: false,
      automatic_release: false,
      force: true,
      skip_metadata: false,
      skip_screenshots: true,
      precheck_include_in_app_purchases: false
    )
    
    UI.success("🏪 App successfully uploaded to App Store Connect!")
  end

  desc "Upload to TestFlight (artifacts only)"
  lane :upload_testflight do
    setup_ci if ENV['CI']
    
    # 設定 App Store Connect API（從環境變數讀取）
    if ENV['CI']
      api_key = app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY']
      )
    end
    
    # 檢查 IPA 檔案是否存在
    ipa_path = "./build/Runner.ipa"
    unless File.exist?(ipa_path)
      UI.error("❌ IPA 檔案不存在: #{ipa_path}")
      UI.error("請確保已下載 build artifacts")
      raise "IPA file not found"
    end
    
    upload_to_testflight(
      api_key: api_key,
      ipa: ipa_path,
      skip_waiting_for_build_processing: true,
      changelog: "New beta build from CI/CD"
    )
    
    UI.success("🚀 App successfully uploaded to TestFlight!")
  end

  desc "Upload to App Store (artifacts only)"
  lane :upload_appstore do
    setup_ci if ENV['CI']
    
    # 設定 App Store Connect API（從環境變數讀取）
    if ENV['CI']
      api_key = app_store_connect_api_key(
        key_id: ENV['APP_STORE_CONNECT_API_KEY_ID'],
        issuer_id: ENV['APP_STORE_CONNECT_ISSUER_ID'],
        key_content: ENV['APP_STORE_CONNECT_API_KEY']
      )
    end
    
    # 檢查 IPA 檔案是否存在
    ipa_path = "./build/Runner.ipa"
    unless File.exist?(ipa_path)
      UI.error("❌ IPA 檔案不存在: #{ipa_path}")
      UI.error("請確保已下載 build artifacts")
      raise "IPA file not found"
    end
    
    upload_to_app_store(
      api_key: api_key,
      ipa: ipa_path,
      submit_for_review: false,
      automatic_release: false,
      force: true,
      skip_metadata: false,
      skip_screenshots: true,
      precheck_include_in_app_purchases: false
    )
    
    UI.success("🏪 App successfully uploaded to App Store Connect!")
  end
end
